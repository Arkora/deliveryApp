{"ast":null,"code":"import { ADD_CART, REMOVE_CART, DELETE_INGRENDIENT, UPDATE_QUANTITY } from \"../constants/ActionTypes\";\nexport const orderReducer = (state = {\n  products: [],\n  total: 0\n}, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case ADD_CART:\n      let exists = state.products.find(item => item.id === payload.id);\n      let price = 0;\n      let product = {};\n      let subTotal = state.total;\n\n      if (!exists) {\n        price = Number(payload.price) * Number(payload.quantity);\n        product = {\n          id: payload.id,\n          title: payload.title,\n          quantity: payload.quantity,\n          price: price,\n          ingrendients: payload.ingrendients\n        };\n        subTotal += price;\n        state.products.push(product);\n      } else {\n        product = exists;\n        product.quantity += payload.quantity;\n        price = Number(payload.price) * Number(payload.quantity);\n        product.price += price;\n        subTotal += price;\n      }\n\n      return { ...state,\n        products: [...state.products],\n        total: subTotal\n      };\n\n    case REMOVE_CART:\n      let clone = state.products;\n      let productToDelete = state.products.find(item => item.id === payload);\n      let tempTotal = state.total - productToDelete.price;\n      clone.splice(clone.indexOf(productToDelete), 1);\n      return { ...state,\n        products: clone,\n        total: tempTotal\n      };\n\n    case DELETE_INGRENDIENT:\n      let productToUpdate = state.products.find(item => item.id === payload.id);\n      let newProduct = productToUpdate.ingrendients.filter(item => item !== payload.item);\n      productToUpdate.ingrendients = newProduct;\n      return { ...state,\n        products: [...state.products]\n      };\n\n    case UPDATE_QUANTITY:\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/PC/Desktop/DeliveryApp/client/src/redux/reducers/CartReducer.js"],"names":["ADD_CART","REMOVE_CART","DELETE_INGRENDIENT","UPDATE_QUANTITY","orderReducer","state","products","total","type","payload","exists","find","item","id","price","product","subTotal","Number","quantity","title","ingrendients","push","clone","productToDelete","tempTotal","splice","indexOf","productToUpdate","newProduct","filter"],"mappings":"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","sourcesContent":["import { ADD_CART,REMOVE_CART,DELETE_INGRENDIENT,UPDATE_QUANTITY } from \"../constants/ActionTypes\";\r\n\r\n\r\n\r\n  export const orderReducer = (state = {products:[],total:0}, { type, payload }) => {\r\n\r\n    \r\n    \r\n    switch (type) {\r\n      case ADD_CART:\r\n        let exists = state.products.find((item) => item.id === payload.id)\r\n        let price = 0        \r\n        let product = {}\r\n        let subTotal = state.total\r\n        if(!exists) {\r\n          price =  Number(payload.price)*Number(payload.quantity)\r\n          product = {id:payload.id,title:payload.title,quantity:payload.quantity,price:price,ingrendients:payload.ingrendients}\r\n          subTotal +=price\r\n          state.products.push(product)\r\n        }else{\r\n          product = exists\r\n          product.quantity += payload.quantity\r\n          price = Number(payload.price)*Number(payload.quantity)\r\n          product.price += price\r\n          subTotal +=price\r\n        }\r\n\r\n        return{...state,products:[...state.products],total:subTotal}\r\n         \r\n         \r\n         \r\n        \r\n      case REMOVE_CART:\r\n        let clone = state.products;\r\n        let productToDelete = state.products.find((item) => item.id === payload)\r\n             \r\n        let tempTotal = state.total-productToDelete.price           \r\n\r\n        clone.splice(clone.indexOf(productToDelete),1);\r\n        return {...state,products:clone,total:tempTotal};\r\n\r\n      case DELETE_INGRENDIENT:               \r\n        let productToUpdate = state.products.find((item) => item.id === payload.id)\r\n        let newProduct = productToUpdate.ingrendients.filter((item) => item !== payload.item)\r\n        productToUpdate.ingrendients =newProduct\r\n        return{...state,products:[...state.products]}\r\n\r\n      case UPDATE_QUANTITY:\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}