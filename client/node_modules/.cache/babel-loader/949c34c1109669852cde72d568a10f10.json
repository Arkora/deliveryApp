{"ast":null,"code":"import { ADD_CART, REMOVE_CART, DELETE_INGRENDIENT, UPDATE_QUANTITY } from \"../constants/ActionTypes\";\nexport const orderReducer = (state = {\n  products: [],\n  total: 0\n}, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case ADD_CART:\n      let exists = state.products.find(item => item.id === payload.id);\n      var price = 0;\n      var product = {};\n      var addTotal = state.total;\n      var subTotal = 0;\n\n      if (!exists) {\n        subTotal = Number(payload.price) * Number(payload.quantity);\n        product = {\n          id: payload.id,\n          title: payload.title,\n          quantity: payload.quantity,\n          price: Number(payload.price),\n          subTotal: subTotal,\n          ingrendients: payload.ingrendients\n        };\n        addTotal += subTotal;\n        state.products.push(product);\n      } else {\n        product = exists;\n        product.quantity += payload.quantity;\n        subTotal = Number(payload.price) * Number(payload.quantity);\n        product.subTotal += subTotal;\n        addTotal += subTotal;\n      }\n\n      return { ...state,\n        products: [...state.products],\n        total: addTotal\n      };\n\n    case REMOVE_CART:\n      let clone = state.products;\n      product = state.products.find(item => item.id === payload);\n      addTotal = state.total - product.subTotal;\n      clone.splice(clone.indexOf(product), 1);\n      return { ...state,\n        products: clone,\n        total: addTotal\n      };\n\n    case DELETE_INGRENDIENT:\n      product = state.products.find(item => item.id === payload.id);\n      let ingrendients = product.ingrendients.filter(item => item !== payload.item);\n      product.ingrendients = ingrendients;\n      return { ...state,\n        products: [...state.products]\n      };\n\n    case UPDATE_QUANTITY:\n      product = state.products.find(item => item.id === payload.id);\n      let newQuantity = payload.quantity;\n      let newSubTotal = product.price * newQuantity;\n      let newTotal = (newQuantity - product.quantity) * product.price + state.total;\n      product.quantity = newQuantity;\n      product.subTotal = newSubTotal;\n      return { ...state,\n        products: [...state.products],\n        total: newTotal\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/PC/Desktop/DeliveryApp/client/src/redux/reducers/CartReducer.js"],"names":["ADD_CART","REMOVE_CART","DELETE_INGRENDIENT","UPDATE_QUANTITY","orderReducer","state","products","total","type","payload","exists","find","item","id","price","product","addTotal","subTotal","Number","quantity","title","ingrendients","push","clone","splice","indexOf","filter","newQuantity","newSubTotal","newTotal"],"mappings":"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","sourcesContent":["import { ADD_CART,REMOVE_CART,DELETE_INGRENDIENT,UPDATE_QUANTITY } from \"../constants/ActionTypes\";\r\n\r\n\r\n\r\n  export const orderReducer = (state = {products:[],total:0}, { type, payload }) => {\r\n\r\n    \r\n    \r\n    switch (type) {\r\n      case ADD_CART:\r\n        let exists = state.products.find((item) => item.id === payload.id)\r\n        var price = 0        \r\n        var product = {}\r\n        var addTotal = state.total\r\n        var subTotal = 0\r\n        if(!exists) {\r\n          subTotal =  Number(payload.price)*Number(payload.quantity)\r\n          product = {id:payload.id,title:payload.title,quantity:payload.quantity,price:Number(payload.price),subTotal:subTotal,ingrendients:payload.ingrendients}\r\n          addTotal +=subTotal\r\n          state.products.push(product)\r\n        }else{\r\n          product = exists\r\n          product.quantity += payload.quantity\r\n          subTotal = Number(payload.price)*Number(payload.quantity)\r\n          product.subTotal += subTotal\r\n          addTotal +=subTotal\r\n        }\r\n\r\n        return{...state,products:[...state.products],total:addTotal}\r\n         \r\n         \r\n         \r\n        \r\n      case REMOVE_CART:\r\n         let clone = state.products;\r\n        product = state.products.find((item) => item.id === payload)\r\n        addTotal = state.total - product.subTotal\r\n        clone.splice(clone.indexOf(product),1)\r\n        return{...state,products:clone,total:addTotal}\r\n\r\n      case DELETE_INGRENDIENT:               \r\n         product = state.products.find((item) => item.id === payload.id)\r\n        let ingrendients = product.ingrendients.filter((item) => item !== payload.item)\r\n        product.ingrendients =ingrendients\r\n        return{...state,products:[...state.products]}\r\n\r\n      case UPDATE_QUANTITY:\r\n         product = state.products.find((item) => item.id === payload.id)\r\n        let newQuantity = payload.quantity\r\n        let newSubTotal = product.price * newQuantity \r\n\r\n        let newTotal = ((newQuantity-product.quantity)*product.price)+state.total      \r\n        product.quantity = newQuantity\r\n        product.subTotal = newSubTotal        \r\n        return{...state,products:[...state.products],total:newTotal}\r\n\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}