{"ast":null,"code":"import { ADD_INGRENDIENT, REMOVE_INGRENDIENT } from \"../constants/ActionTypes\";\nconst initialState = {\n  ingrendients: []\n};\nexport const ingrendientsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case ADD_INGRENDIENT:\n      return { ...state,\n        ingrendients: [...state.ingrendients, payload]\n      };\n\n    case REMOVE_INGRENDIENT:\n      // let clone = ingrendients;\n      // clone.splice(payload,1);\n      // ingrendients == clone;\n      // return{ingrendients}\n      return {\n        ingrendients: [...state.ingrendients.slice(0, payload), ...state.ingrendients.slice(payload + 1)]\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/PC/Desktop/DeliveryApp/admin/deliveryadmin/src/redux/reducers/IngrendientsReducer.js"],"names":["ADD_INGRENDIENT","REMOVE_INGRENDIENT","initialState","ingrendients","ingrendientsReducer","state","type","payload","slice"],"mappings":"AAAA,SAASA,eAAT,EAAyBC,kBAAzB,QAAmD,0BAAnD;AAEA,MAAMC,YAAY,GAAG;AAEjBC,EAAAA,YAAY,EAAE;AAFG,CAArB;AAOA,OAAO,MAAMC,mBAAmB,GAAG,YAAwC;AAAA,MAAvCC,KAAuC,uEAA/BH,YAA+B;AAAA,MAAlB;AAACI,IAAAA,IAAD;AAAMC,IAAAA;AAAN,GAAkB;;AACvE,UAAQD,IAAR;AAEI,SAAKN,eAAL;AACI,aAAM,EAAC,GAAGK,KAAJ;AAAUF,QAAAA,YAAY,EAAC,CAAC,GAAGE,KAAK,CAACF,YAAV,EAAuBI,OAAvB;AAAvB,OAAN;;AACJ,SAAKN,kBAAL;AACI;AACA;AACA;AAEA;AAEI,aAAO;AAAEE,QAAAA,YAAY,EAAC,CAAC,GAAGE,KAAK,CAACF,YAAN,CAAmBK,KAAnB,CAAyB,CAAzB,EAA2BD,OAA3B,CAAJ,EAAwC,GAAGF,KAAK,CAACF,YAAN,CAAmBK,KAAnB,CAAyBD,OAAO,GAAC,CAAjC,CAA3C;AAAf,OAAP;;AAER;AACI,aAAOF,KAAP;AAdR;AAiBH,CAlBM","sourcesContent":["import { ADD_INGRENDIENT,REMOVE_INGRENDIENT } from \"../constants/ActionTypes\";\r\n\r\nconst initialState = {\r\n      \r\n    ingrendients: []\r\n    \r\n    }\r\n\r\n\r\nexport const ingrendientsReducer = (state = initialState,{type,payload}) =>{\r\n    switch (type) {\r\n\r\n        case ADD_INGRENDIENT:\r\n            return{...state,ingrendients:[...state.ingrendients,payload]};\r\n        case REMOVE_INGRENDIENT:\r\n            // let clone = ingrendients;\r\n            // clone.splice(payload,1);\r\n            // ingrendients == clone;\r\n            \r\n            // return{ingrendients}\r\n                                    \r\n                return { ingrendients:[...state.ingrendients.slice(0,payload),...state.ingrendients.slice(payload+1)]}\r\n            \r\n        default:\r\n            return state;\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}